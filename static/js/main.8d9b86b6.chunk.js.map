{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["messages","update","message","concat","App","p1","Peer","trickle","initiator","p2","on","data","console","log","toString","JSON","stringify","signal","send","error","_useState","useState","_useState2","Object","slicedToArray","setOn","react_default","a","createElement","className","onClick","value","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAOIA,SAAW,IACTC,EAAS,SAACC,GACdF,EAAWA,EAASG,OAAOD,IAmEdE,EAhEH,YACV,WAEE,IAAMC,EAAKC,IAAK,CAAEC,SAAS,EAAOC,WAAW,IACvCC,EAAKH,IAAK,CAAEC,SAAS,IAE3BF,EAAGK,GAAG,SACF,SAACC,GACDC,QAAQC,IAAI,YAAaF,GACzBV,EAAO,SAAWU,EAAKG,SAAS,UAChCb,EAAOc,KAAKC,UAAUL,IACtBF,EAAGQ,OAAON,KAEdN,EAAGK,GAAG,UACF,WACAE,QAAQC,IAAI,0BACZZ,EAAO,gBACPI,EAAGa,KAAK,eAEZb,EAAGK,GAAG,OACF,SAACC,GACDC,QAAQC,IAAI,cAAeF,EAAKG,SAAS,UACzCb,EAAOU,EAAKG,SAAS,YAEzBT,EAAGK,GAAG,QAAS,SAACS,GAAD,OAAWP,QAAQO,MAAM,WAAYA,KACpDd,EAAGK,GAAG,QAAS,kBAAME,QAAQC,IAAI,0BAEjCJ,EAAGC,GAAG,SACF,SAACC,GACDC,QAAQC,IAAI,YAAaF,GACzBV,EAAO,YAAcU,EAAKG,SAAS,UACnCT,EAAGY,OAAON,KAEdF,EAAGC,GAAG,UACF,WACAE,QAAQC,IAAI,gBACZJ,EAAGS,KAAK,2CAIZT,EAAGC,GAAG,OACF,SAACC,GACDC,QAAQC,IAAI,cAAeF,EAAKG,SAAS,UACzCb,EAAOU,EAAKG,SAAS,YAEzBL,EAAGC,GAAG,QAAS,SAACS,GAAD,OAAWP,QAAQO,MAAM,WAAYA,KACpDV,EAAGC,GAAG,QAAS,kBAAME,QAAQC,IAAI,0BA7CnC,GADgB,IAAAO,EAoDIC,oBAAS,GApDbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAoDTV,EApDSY,EAAA,GAoDLG,EApDKH,EAAA,GAsDhB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAML,GAAOf,KAA9B,gBACCA,EAAKgB,EAAAC,EAAAC,cAAA,SAAOG,MAAO/B,IAAe0B,EAAAC,EAAAC,cAAA,uBCzDrBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8d9b86b6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport Peer from 'simple-peer';\r\nimport wrtc from 'wrtc';\r\n\r\n\r\nlet messages = []\r\nconst update = (message) => {\r\n  messages = messages.concat(message)\r\n}\r\n\r\nconst App = () => {\r\n  (function () {\r\n    //alert('heloo');\r\n    const p1 = Peer({ trickle: false, initiator: true })\r\n    const p2 = Peer({ trickle: false })\r\n\r\n    p1.on('signal'\r\n      , (data) => {\r\n        console.log('p1 signal', data)\r\n        update('signal' + data.toString('utf-8'))\r\n        update(JSON.stringify(data))\r\n        p2.signal(data);\r\n      })\r\n    p1.on('connect'\r\n      , () => {\r\n        console.log('p1 connected##########')\r\n        update('p1 connected');\r\n        p1.send('hi sudhir')\r\n      })\r\n    p1.on('data'\r\n      , (data) => {\r\n        console.log('p1 received', data.toString('utf-8'))\r\n        update(data.toString('utf-8'));\r\n      })\r\n    p1.on('error', (error) => console.error('p1 error', error))\r\n    p1.on('close', () => console.log('p1 connection closed'))\r\n\r\n    p2.on('signal'\r\n      , (data) => {\r\n        console.log('p2 signal', data)\r\n        update('p2 signal' + data.toString('utf-8'))\r\n        p1.signal(data);\r\n      })\r\n    p2.on('connect'\r\n      , () => {\r\n        console.log('p2 connected')\r\n        p2.send('Fine, thanks. How about you p1 kumar?')\r\n\r\n      }\r\n    )\r\n    p2.on('data'\r\n      , (data) => {\r\n        console.log('p2 received', data.toString('utf-8'))\r\n        update(data.toString('utf-8'))\r\n      })\r\n    p2.on('error', (error) => console.error('p2 error', error))\r\n    p2.on('close', () => console.log('p2 connection closed'))\r\n\r\n\r\n\r\n  })();\r\n\r\n  const [on, setOn] = useState(false);\r\n\r\n  return (\r\n    <div className='App'>\r\n      <button onClick={() => setOn(!on)}>show message</button>\r\n      {on ? <input value={messages} /> : <h4>nothing</h4>}\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}